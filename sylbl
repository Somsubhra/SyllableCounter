#!/usr/bin/env python

"""sylbl: Counts number of syllables in words"""

__author__ = "Somsubhra Bairi"
__copyright__ = "Copyright 2014, Somsubhra Bairi"
__license__ = "Apache License, Version 2.0"
__email__ = "somsubhra.bairi@gmail.com"

# All python imports
from os import walk, path, stat, mkdir, makedirs

# All constant definitions
INPUT_DIRECTORY = 'corpus'
OUTPUT_DIRECTORY = 'out'


##########################################
##  The Hindi Universal Character Set   ##
##########################################
class HindiUTF:

    # Constructor for the Hindi UTF
    def __init__(self):
        pass

    # Declaration of language specific lists
    separators = [u'\u0964', u'\u0965', u"!", u"?"]
    breakers = [u",", u";", u":"]

    # Signs
    symbols = {
        'm_i_chandrabindu': u'\u0900',
        'm_chandrabindu': u'\u0901',
        'm_anusvar': u'\u0902',
        'm_visarga': u'\u0903',

        # Independent vowels
        'l_s_a': u'\u0904',
        'l_a': u'\u0905',
        'l_aa': u'\u0906',
        'l_i': u'\u0907',
        'l_ii': u'\u0908',
        'l_u': u'\u0909',
        'l_uu': u'\u090a',
        'l_v_r': u'\u090b',
        'l_v_l': u'\u090c',
        'l_c_e': u'\u090d',
        'l_s_e': u'\u090e',
        'l_e': u'\u090f',
        'l_ai': u'\u0910',
        'l_c_o': u'\u0911',
        'l_s_o': u'\u0912',
        'l_o': u'\u0913',
        'l_au': u'\u0914',

        # Consonants
        'l_ka': u'\u0915',
        'l_kha': u'\u0916',
        'l_ga': u'\u0917',
        'l_gha': u'\u0918',
        'l_nga': u'\u0919',
        'l_ca': u'\u091a',
        'l_cha': u'\u091b',
        'l_ja': u'\u091c',
        'l_jha': u'\u091d',
        'l_nya': u'\u091e',
        'l_tta': u'\u091f',
        'l_ttha': u'\u0920',
        'l_dda': u'\u0921',
        'l_ddha': u'\u0922',
        'l_nna': u'\u0923',
        'l_ta': u'\u0924',
        'l_tha': u'\u0925',
        'l_da': u'\u0926',
        'l_dha': u'\u0927',
        'l_na': u'\u0928',
        'l_nnna': u'\u0929',
        'l_pa': u'\u092a',
        'l_pha': u'\u092b',
        'l_ba': u'\u092c',
        'l_bha': u'\u092d',
        'l_ma': u'\u092e',
        'l_ya': u'\u092f',
        'l_ra': u'\u0930',
        'l_rra': u'\u0931',
        'l_la': u'\u0932',
        'l_lla': u'\u0933',
        'l_llla': u'\u0934',
        'l_va': u'\u0935',
        'l_sha': u'\u0936',
        'l_ssa': u'\u0937',
        'l_sa': u'\u0938',
        'l_ha': u'\u0939',

        # Dependent vowels
        'm_oe': u'\u093a',
        'm_ooe': u'\u093b',
        'm_nukta': u'\u093c',
        'm_avagraha': u'\u093d',
        'm_aa': u'\u093e',
        'm_i': u'\u093f',
        'm_ii': u'\u0940',
        'm_u': u'\u0941',
        'm_uu': u'\u0942',
        'm_v_r': u'\u0943',
        'm_v_rr': u'\u0944',
        'm_c_e': u'\u0945',
        'm_s_e': u'\u0946',
        'm_e': u'\u0947',
        'm_ai': u'\u0948',
        'm_c_o': u'\u0949',
        'm_s_o': u'\u094a',
        'm_o': u'\u094b',
        'm_au': u'\u094c',
        'm_virama': u'\u094d',
        'm_p_e': u'\u094e',
        'm_aw': u'\u094f',

        'l_om': u'\u0950',
        'm_udatta': u'\u0951',
        'm_anudatta': u'\u0952',
        'm_grave_accent': u'\u0953',
        'm_acute_accent': u'\u0954',
        'm_c_l_e': u'\u0955',
        'm_ue': u'\u0956',
        'm_uue': u'\u0957',

        'l_qa': u'\u0958',
        'l_khha': u'\u0959',
        'l_ghha': u'\u095a',
        'l_za': u'\u095b',
        'l_dddha': u'\u095c',
        'l_rha': u'\u095d',
        'l_fa': u'\u095e',
        'l_yya': u'\u095f',
        'l_v_rr': u'\u0960',
        'l_v_ll': u'\u0961',

        'm_v_l': u'\u0962',
        'm_v_ll': u'\u0963',

        # Digits
        'l_0': u'\u0966',
        'l_1': u'\u0967',
        'l_2': u'\u0968',
        'l_3': u'\u0969',
        'l_4': u'\u096a',
        'l_5': u'\u096b',
        'l_6': u'\u096c',
        'l_7': u'\u096d',
        'l_8': u'\u096e',
        'l_9': u'\u096f',

        'm_abbr': u'\u0970',
        'm_spacing_dot': u'\u0971',

        'l_c_a': u'\u0972',
        'l_oe': u'\u0973',
        'l_ooe': u'\u0974',
        'l_aw': u'\u0975',
        'l_ue': u'\u0976',
        'l_uue': u'\u0977',

        'l_zha': u'\u0979',
        'l_h_ya': u'\u097a',
        'l_gga': u'\u097b',
        'l_jja': u'\u097c',
        'l_glottal_stop': u'\u097d',
        'l_ddda': u'\u097e',
        'l_bba': u'\u097f',
    }

    # Consonants ordered based on the tongue action backward to forward
    ordered_consonants = [symbols['l_ha'], symbols['l_a'], symbols['l_ka'], symbols['l_ga'],
                          symbols['l_kha'], symbols['l_gha'], symbols['l_ca'], symbols['l_ja'],
                          symbols['l_cha'], symbols['l_sha'], symbols['l_jha'], symbols['l_ssa'],
                          symbols['l_nya'], symbols['l_ya'], symbols['l_da'], symbols['l_dha'],
                          symbols['l_tha'], symbols['l_ta'], symbols['l_na'], symbols['l_la'],
                          symbols['l_ra'], symbols['l_sa'], symbols['l_tta'], symbols['l_dda'],
                          symbols['l_ddha'], symbols['l_ttha'], symbols['l_nna'], symbols['l_lla'],
                          symbols['l_nga'], symbols['l_pha'], symbols['l_va'], symbols['l_ma'],
                          symbols['l_bha'], symbols['l_ba'], symbols['l_pa']]

##########################################
##  End Hindi Universal Character Set   ##
##########################################


##########################################
## The Gujarati Universal Character set ##
##########################################
class GujaratiUTF:

    # Constructor for the Gujarati UTF
    def __init__(self):
        pass

    # Declaration of language specific lists
    separators = [u".", u"!", u"?"]
    breakers = [u",", u";", u":"]

    symbols = {
        'halan': u'\u0acd',

        # Signs
        'm_chandrabindu': u'\u0a81',
        'm_anusvar': u'\u0a82',
        'm_visarga': u'\u0a83',
        'm_nukta': u'\u0abc',
        'm_avagraha': u'\u0abd',

        # Independent vowels
        'l_a': u'\u0a85',
        'l_aa': u'\u0a86',
        'l_i': u'\u0a87',
        'l_ii': u'\u0a88',
        'l_u': u'\u0a89',
        'l_uu': u'\u0a8a',
        'l_v_r': u'\u0a8b',
        'l_v_l': u'\u0a8c',
        'l_ae': u'\u0a8d',
        'l_e': u'\u0a8f',
        'l_ai': u'\u0a90',
        'l_au': u'\u0a91',
        'l_o': u'\u0a93',
        'l_ow': u'\u0a94',

        # Consonants
        'l_ka': u'\u0a95',
        'l_kha': u'\u0a96',
        'l_ga': u'\u0a97',
        'l_gha': u'\u0a98',
        'l_nga': u'\u0a99',
        'l_ca': u'\u0a9a',
        'l_cha': u'\u0a9b',
        'l_ja': u'\u0a9c',
        'l_jha': u'\u0a9d',
        'l_nya': u'\u0a9e',
        'l_tta': u'\u0a9f',
        'l_ttha': u'\u0aa0',
        'l_dda': u'\u0aa1',
        'l_ddha': u'\u0aa2',
        'l_nna': u'\u0aa3',
        'l_ta': u'\u0aa4',
        'l_tha': u'\u0aa5',
        'l_da': u'\u0aa6',
        'l_dha': u'\u0aa7',
        'l_na': u'\u0aa8',
        'l_pa': u'\u0aaa',
        'l_pha': u'\u0aab',
        'l_ba': u'\u0aac',
        'l_bha': u'\u0aad',
        'l_ma': u'\u0aae',
        'l_ya': u'\u0aaf',
        'l_ra': u'\u0ab0',
        'l_la': u'\u0ab2',
        'l_lla': u'\u0ab3',
        'l_va': u'\u0ab5',
        'l_sha': u'\u0ab6',
        'l_ssa': u'\u0ab7',
        'l_sa': u'\u0ab8',
        'l_ha': u'\u0ab9',

        # Dependent vowels
        'm_aa': u'\u0abe',
        'm_i': u'\u0abf',
        'm_ii': u'\u0ac0',
        'm_u': u'\u0ac1',
        'm_uu': u'\u0ac2',
        'm_v_r': u'\u0ac3',
        'm_v_rr': u'\u0ac4',
        'm_ae': u'\u0ac5',
        'm_e': u'\u0ac7',
        'm_ai': u'\u0ac8',
        'm_au': u'\u0ac9',
        'm_o': u'\u0acb',
        'm_ow': u'\u0acc',

        'l_om': u'\u0ad0',
        'l_ru': u'\u0af1',
        'l_ri': u'\u0ae0',
        'l_lri': u'\u0ae1',

        # Digits
        'l_0': u'\u0ae6',
        'l_1': u'\u0ae7',
        'l_2': u'\u0ae8',
        'l_3': u'\u0ae9',
        'l_4': u'\u0aea',
        'l_5': u'\u0aeb',
        'l_6': u'\u0aec',
        'l_7': u'\u0aed',
        'l_8': u'\u0aee',
        'l_9': u'\u0aef'
    }

    # Consonants ordered based on the tongue action backward to forward
    ordered_consonants = [symbols['l_ha'], symbols['l_a'], symbols['l_ka'], symbols['l_ga'],
                          symbols['l_kha'], symbols['l_gha'], symbols['l_ca'], symbols['l_ja'],
                          symbols['l_cha'], symbols['l_sha'], symbols['l_jha'], symbols['l_ssa'],
                          symbols['l_nya'], symbols['l_ya'], symbols['l_da'], symbols['l_dha'],
                          symbols['l_tha'], symbols['l_ta'], symbols['l_na'], symbols['l_la'],
                          symbols['l_ra'], symbols['l_sa'], symbols['l_tta'], symbols['l_dda'],
                          symbols['l_ddha'], symbols['l_ttha'], symbols['l_nna'], symbols['l_lla'],
                          symbols['l_nga'], symbols['l_pha'], symbols['l_va'], symbols['l_ma'],
                          symbols['l_bha'], symbols['l_ba'], symbols['l_pa']]

##########################################
## End Gujarati Universal Character Set ##
##########################################


##########################################
##       The syllable counter class     ##
##########################################
class SyllableCounter:

    # Constructor for the syllable counter
    def __init__(self):
        pass

    # Strips the word so that only consonants remain
    @staticmethod
    def strip(word):
        # Replace all the breakers appearing in the word
        for breaker in GujaratiUTF.breakers:
            word.replace(breaker, '')

        # Strip all the vowels
        stripped_word = ''.join([s for s in word if s in GujaratiUTF.ordered_consonants])

        return stripped_word

    # Count the number of syllables in the word
    @staticmethod
    def number_of_syllables(word):

        # Get the stripped word
        stripped_word = SyllableCounter.strip(word)

        no_syllables = 1
        count = 1
        length = len(stripped_word)

        state = True

        if length > 3:
            state = GujaratiUTF.ordered_consonants.index(stripped_word[1]) \
                > GujaratiUTF.ordered_consonants.index(stripped_word[0])

        for i in range(2, length - 1):

            if count == 2:
                count = 0
                no_syllables += 1

            if state:
                if GujaratiUTF.ordered_consonants.index(stripped_word[i]) \
                        < GujaratiUTF.ordered_consonants.index(stripped_word[i-1]):
                    count = 0
                    no_syllables += 1
                    state = GujaratiUTF.ordered_consonants.index(stripped_word[i+1]) \
                        > GujaratiUTF.ordered_consonants.index(stripped_word[i])
                    continue
            else:
                if GujaratiUTF.ordered_consonants.index(stripped_word[i]) \
                        > GujaratiUTF.ordered_consonants.index(stripped_word[i-1]):
                    count = 0
                    no_syllables += 1
                    state = GujaratiUTF.ordered_consonants.index(stripped_word[i+1]) \
                        > GujaratiUTF.ordered_consonants.index(stripped_word[i])
                    continue

            count += 1

        if count == 2:
            no_syllables += 1

        return no_syllables

    # Count the number of syllables for all words in file
    @staticmethod
    def count(input_file_name, output_file_name):
        input_file = open(input_file_name)
        content = input_file.read()
        content = content.decode("utf-8")

        words = content.split()

        print "Parsing input file " + input_file_name + " containing " + str(len(words)) + " words..."

        output_file = open(output_file_name + ".csv", 'w+')

        output_file.write("Word;Syllables\n")

        for word in words:
            output_file.write(word.encode("utf-8"))
            syllables = SyllableCounter.number_of_syllables(word)
            output_file.write(";" + str(syllables))
            output_file.write("\n")

        input_file.close()
        output_file.close()

##########################################
##       End syllable counter class     ##
##########################################


##########################################
##            The main method           ##
##########################################
def main():

    # Check for the input directory
    try:
        stat(INPUT_DIRECTORY)
    except:
        print "No files present in input directory " + INPUT_DIRECTORY + "..."
        print "Terminating program..."
        exit()

    # Create the output directory
    try:
        stat(OUTPUT_DIRECTORY)
    except:
        mkdir(OUTPUT_DIRECTORY)

    # Walk through the input directory and count number of syllables
    for(dir_path, _, file_names) in walk(INPUT_DIRECTORY):
        for file_name in file_names:
            input_file = path.join(dir_path, file_name)

            output_file = path.join(OUTPUT_DIRECTORY, dir_path, file_name)
            output_dir = path.join(OUTPUT_DIRECTORY, dir_path)

            # Create the output directory path
            try:
                stat(output_dir)
            except:
                makedirs(output_dir)

            SyllableCounter.count(input_file, output_file)

##########################################
##            End main method           ##
##########################################


# Call the main method
if __name__ == '__main__':
    main()
